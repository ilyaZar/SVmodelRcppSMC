// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppSMC.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// svModelBpfLogLike
double svModelBpfLogLike(arma::vec measurements, unsigned long lNumber, arma::vec initVals);
RcppExport SEXP _SVmodelRcppSMC_svModelBpfLogLike(SEXP measurementsSEXP, SEXP lNumberSEXP, SEXP initValsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type measurements(measurementsSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lNumber(lNumberSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initVals(initValsSEXP);
    rcpp_result_gen = Rcpp::wrap(svModelBpfLogLike(measurements, lNumber, initVals));
    return rcpp_result_gen;
END_RCPP
}
// svModelPMMHimpl
Rcpp::List svModelPMMHimpl(arma::vec measurements, unsigned long lNumber, unsigned long lMCMCits, arma::vec initVals, arma::vec rwMHvar, const int numProgressOutputs);
RcppExport SEXP _SVmodelRcppSMC_svModelPMMHimpl(SEXP measurementsSEXP, SEXP lNumberSEXP, SEXP lMCMCitsSEXP, SEXP initValsSEXP, SEXP rwMHvarSEXP, SEXP numProgressOutputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type measurements(measurementsSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lNumber(lNumberSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lMCMCits(lMCMCitsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initVals(initValsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rwMHvar(rwMHvarSEXP);
    Rcpp::traits::input_parameter< const int >::type numProgressOutputs(numProgressOutputsSEXP);
    rcpp_result_gen = Rcpp::wrap(svModelPMMHimpl(measurements, lNumber, lMCMCits, initVals, rwMHvar, numProgressOutputs));
    return rcpp_result_gen;
END_RCPP
}
// svModelPGimpl
Rcpp::List svModelPGimpl(arma::vec measurements, unsigned long lNumber, unsigned long lMCMCits, arma::vec initVals, const std::vector<double>& initReferenceTrajectory, const int numProgressOutputs);
RcppExport SEXP _SVmodelRcppSMC_svModelPGimpl(SEXP measurementsSEXP, SEXP lNumberSEXP, SEXP lMCMCitsSEXP, SEXP initValsSEXP, SEXP initReferenceTrajectorySEXP, SEXP numProgressOutputsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type measurements(measurementsSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lNumber(lNumberSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lMCMCits(lMCMCitsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initVals(initValsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type initReferenceTrajectory(initReferenceTrajectorySEXP);
    Rcpp::traits::input_parameter< const int >::type numProgressOutputs(numProgressOutputsSEXP);
    rcpp_result_gen = Rcpp::wrap(svModelPGimpl(measurements, lNumber, lMCMCits, initVals, initReferenceTrajectory, numProgressOutputs));
    return rcpp_result_gen;
END_RCPP
}
// svModelALtrackingImp
Rcpp::List svModelALtrackingImp(arma::vec measurements, arma::vec initVals, unsigned long lNumber, const double resampleFreq, bool printALinfo);
RcppExport SEXP _SVmodelRcppSMC_svModelALtrackingImp(SEXP measurementsSEXP, SEXP initValsSEXP, SEXP lNumberSEXP, SEXP resampleFreqSEXP, SEXP printALinfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type measurements(measurementsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initVals(initValsSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type lNumber(lNumberSEXP);
    Rcpp::traits::input_parameter< const double >::type resampleFreq(resampleFreqSEXP);
    Rcpp::traits::input_parameter< bool >::type printALinfo(printALinfoSEXP);
    rcpp_result_gen = Rcpp::wrap(svModelALtrackingImp(measurements, initVals, lNumber, resampleFreq, printALinfo));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVmodelRcppSMC_svModelBpfLogLike", (DL_FUNC) &_SVmodelRcppSMC_svModelBpfLogLike, 3},
    {"_SVmodelRcppSMC_svModelPMMHimpl", (DL_FUNC) &_SVmodelRcppSMC_svModelPMMHimpl, 6},
    {"_SVmodelRcppSMC_svModelPGimpl", (DL_FUNC) &_SVmodelRcppSMC_svModelPGimpl, 6},
    {"_SVmodelRcppSMC_svModelALtrackingImp", (DL_FUNC) &_SVmodelRcppSMC_svModelALtrackingImp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVmodelRcppSMC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
