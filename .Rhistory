library(SVmodelPMMH)
devtools::document()
library(SVmodelPMMH)
devtools::document()
library(SVmodelPMMH)
devtools::document()
library(SVmodelPMMH)
devtools::document()
library(SVmodelPMMH)
sim <- simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
library(SVmodelPMMH)
sim <- simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
sim
res <- nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
Rcpp::sourceCpp('src/nonLinPMMH.cpp')
library(SVmodelPMMH)
Rcpp::sourceCpp('src/nonLinPMMH.cpp')
res <- nonLinPMMH_impl(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
res <- nonLinPMMH_impl(sim$data, particles=100,iterations=50)
res <- nonLinPMMH_impl(datas = sim$data, lNumber = particles=100, lMCMCits = iterations=50)
res <- nonLinPMMH_impl(datas = sim$data, lNumber = 100, lMCMCits = iterations=50)
res <- nonLinPMMH_impl(datas = sim$data, lNumber = 100, lMCMCits = 50)
res <- nonLinPMMH_impl(data = sim$data, lNumber = 100, lMCMCits = 50)
sim <- simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- nonLinPMMH_impl(data = sim$data, lNumber = 100, lMCMCits = 50)
res
res <- nonLinPMMH_impl(data = sim$data, lNumber = 1000, lMCMCits = 500)
library(SVmodelPMMH)
sim <- simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
devtools::document()
library(SVmodelPMMH)
sim <- simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
nonLinPMMH
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
library(SVmodelPMMH)
ivonv
install.packages(xfun)
install.packages("xfun")
xfun::read_utf8("./R/SVmodelPMMH.R")
xfun::read_utf8("./R/RcppExports.R")
warnings()
xfun::read_utf8("./R/simNonlin.R")
warnings()
xfun::read_utf8("./R/RcppExports.R")
warnings()
xfun::read_utf8("./R/nonLinPMMH.R")
warnings()
xfun::read_utf8("./DESCRIPTION")
warnings()
xfun::read_utf8("./README.md")
warnings()
devtools::document()
warnings()
devtools::document()
xfun::read_utf8("./src/nonLinPMMH.cpp")
warnings()
xfun::read_utf8("./src/nonLinPMMH.cpp")
warnings()
xfun::read_utf8("./README.md")
warnings()
xfun::read_utf8("./DESCRIPTION")
warnings()
xfun::read_utf8("./src/nonLinPMMH.cpp")
warnings()
xfun::read_utf8("./src/nonLinPMMH.h")
warnings()
xfun::read_utf8("./NAMESPACE")
warnings()
xfun::read_utf8("./src/SVmodelPMMH.so")
devtools::
devtools::document()
xfun::read_utf8("./src/SVmodelPMMH.so")
xfun::read_utf8("./src/nonLinPMMH.h")
warnings()
xfun::read_utf8("./src/RcppExports.cpp")
xfun::read_utf8("./R/simNonlin.R")
warnings()
devtools::document()
xfun::read_utf8("./man/nonLinPMMH_imp.Rd")
xfun::read_utf8("./man/nonLinPMMH.Rd")
xfun::read_utf8("./man/simNonlin.Rd")
xfun::read_utf8("./man/SVmodelPMMH-package.Rd")
warnings()
devtools::document()
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=50,burnin=0,plot=TRUE)
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=5,burnin=0,plot=TRUE)
devtools::document()
warnings()
library(SVmodelPMMH)
devtools::document()
warnings()
devtools::document()
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=5,burnin=0,plot=TRUE)
Q
devtools::document()
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=100,iterations=5,burnin=0,plot=TRUE)
res
?%%
10%%2
10%%3
10%%4
0%%4
library(SVmodelPMMH)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=10,iterations=500,burnin=0,plot=TRUE)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=10,iterations=500,burnin=0,plot=TRUE)
library(SVmodelPMMH)
sim <- SVmodelPMMH::simNonlin(len=500,var_init=5,var_evol=10,var_obs=1,cosSeqOffset=0)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=10,iterations=500,burnin=0,plot=TRUE)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=10,iterations=50000,burnin=0,plot=TRUE)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=5000,iterations=100,burnin=0,plot=TRUE)
res
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=5000,iterations=100,burnin=0,plot=TRUE)
res <- SVmodelPMMH::nonLinPMMH(sim$data, particles=5000,iterations=1000,burnin=0,plot=TRUE)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
plot_pmmh_output <- function(output_pmmh,
burnin,
true_vals = NULL,
plot_type = "ilya") {
if (is.null(true_vals)) {
out_type_simulation = TRUE
sigma_x_true <- true_vals[1]
beta_y_true  <- true_vals[2]
} else {
out_type_simulation = FALSE
}
MM <- length(output_pmmh[[1]])
if (plot_type == "ilya") {
samples_sigma_x <- output_pmmh$par_out_pmmh[[1]]
samples_beta_y  <- output_pmmh$par_out_pmmh[[2]]
post_mean_sig_x <- mean(samples_sigma_x[burnin:MM])
post_mean_bet_y <- mean(samples_beta_y[burnin:MM])
graphics::par(mfrow = c(2, 2), oma = c(0, 0, 2, 0))
graphics::plot(samples_sigma_x,
type = "l",
ylab = (expression(sigma~trace)),
xlab = "Number of MCMC iteration")
graphics::abline(h = post_mean_sig_x,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(h = sigma_x_true, col = "green", lty = 1)
graphics::plot(samples_beta_y,
type = "l",
ylab = (expression(beta~trace)),
xlab = "Number of MCMC iteration")
graphics::abline(h = post_mean_bet_y,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(h = beta_y_true, col = "green", lty = 1)
graphics::hist(samples_sigma_x[burnin:MM],
main = expression(Histogramm~of~sigma),
xlab = expression(sigma))
graphics::abline(v = post_mean_sig_x,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(v = sigma_x_true, col = "green", lty = 1)
graphics::hist(samples_beta_y[burnin:MM],
main = expression(Histogramm~of~beta),
xlab = expression(beta))
graphics::abline(v = post_mean_bet_y,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(v = beta_y_true, col = "green", lty = 2)
}
# else if (graphics::plot_type == "leah") {
#   res_plot <- res[burnin + 1:iterations, ]
#   graphics::par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))
#   with(res_plot, graphics::hist(samples_sigv,
#                                 xlab = expression(sigma_v), ylab = "density",
#                                 main = NA))
#   graphics::abline(v = sqrt(10), lty = 2, col = "darkblue", lwd = 2)
#   with(res_plot, graphics::plot(samples_sigw, samples_sigv,
#                                 xlab = expression(sigma_w), ylab = expression(sigma_v),
#                                 main = NA, col = "darkblue"))
#   with(res_plot, graphics::plot(samples_sigv, type = "l",
#                                 ylab = expression(sigma_v),
#                                 main = NA, xlim = c(0, iterations - burnin)))
#   with(res_plot, graphics::plot(samples_sigv, samples_sigw,
#                                 xlab = expression(sigma_v), ylab = expression(sigma_w),
#                                 main = NA, col = "darkblue"))
#   with(res_plot, graphics::hist(samples_sigw,
#                                 xlab = expression(sigma_w), ylab = "density",
#                                 main = NA))
#   graphics::abline(v = 1, lty = 2, col = "darkblue", lwd = 2)
#   with(res_plot, graphics::plot(samples_sigw, type = "l",
#                                 ylab = expression(sigma_w),
#                                 main = NA, xlim = c(0, iterations - burnin)))
#   graphics::title("Posterior Estimates", outer = TRUE)
# }
else {
stop("Unknown plot type.")
}
graphics::title("Posterior Estimatation Results", outer = TRUE)
graphics::par(mfrow = c(1, 1))
}
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
#' Helper function for plotting PMMH estimation results
#'
#' @param output_pmmh output object as provided by the pmmh estimatio functions
#' @param burnin burnin period
#' @param true_vals defaults to NULL e.g. when a real dataset is used; for simulated data
#'   can be set to true parameter values
#'
#' @return invisible return; function called for plot side effects
#' @export
plot_pmmh_output <- function(output_pmmh,
burnin,
true_vals = NULL) {
if (!is.null(true_vals)) {
out_type_simulation = TRUE
sigma_x_true <- true_vals[1]
beta_y_true  <- true_vals[2]
} else {
out_type_simulation = FALSE
}
MM <- length(output_pmmh[[1]])
samples_sigma_x <- output_pmmh$samples_sigma_x
samples_beta_y  <- output_pmmh$samples_beta_y
post_mean_sig_x <- mean(samples_sigma_x[burnin:MM])
post_mean_bet_y <- mean(samples_beta_y[burnin:MM])
graphics::par(mfrow = c(2, 3), oma = c(0, 0, 2, 0))
expressions_sigma <- list(expression(Histogramm~of~sigma_x),
expression(sigma_x),
expression(sigma_x~trace))
plot_parameter_post_results(samples = samples_sigma_x,
post_mean = post_mean_sig_x,
true_vals = sigma_x_true,
expression_list = expressions_sigma,
burnin = burnin,
MM = MM,
out_type_simulation)
expressions_beta <- list(expression(Histogramm~of~beta_y),
expression(beta_y),
expression(beta_y~trace))
plot_parameter_post_results(samples = samples_beta_y,
post_mean = post_mean_bet_y,
true_vals = beta_y_true,
expression_list = expressions_beta,
burnin = burnin,
MM = MM,
out_type_simulation)
title_text <- paste0("Posterior Estimatation Results: ",
"(red: post. mean; green: true values if provided)")
graphics::title(main = title_text,
outer = TRUE)
graphics::par(mfrow = c(1, 1))
}
plot_parameter_post_results <- function(samples,
post_mean,
true_vals,
expression_list,
burnin,
MM,
out_type_simulation,
from_above_after_burnin) {
expression_main  <- expression_list[[1]]
expression_par   <- expression_list[[2]]
expression_trace <- expression_list[[3]]
samples_main      <- samples[[1]]
samples_remaining <- samples[[2]]
graphics::hist(samples_main[burnin:MM],
main = expression_main,
xlab = expression_par)
graphics::abline(v = post_mean,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(v = true_vals,
col = "green",
lty = 1)
graphics::plot(samples_main,
main = "Full Trace Plot",
type = "l",
ylab = expression_trace,
xlab = "Number of MCMC iteration")
graphics::abline(h = post_mean,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(h = true_vals,
col = "green",
lty = 1)
graphics::plot(samples_main[burnin:MM],
main = "Trace Plot After Burnin",
type = "l",
ylab = expression_trace,
xlab = "Number of MCMC iteration")
graphics::abline(h = post_mean,
col = "red",
lty = 2)
if (out_type_simulation) graphics::abline(h = true_vals,
col = "green",
lty = 1)
if (from_above_after_burnin) {
samples_main      <- samples_main[burnin:MM]
samples_remaining <- samples_remaining[burnin:MM]
title_from_above  <- "Sample pairs after burnin"
} else {
title_from_above <- "All sample pairs"
}
graphics::plot(samples_main,
samples_remaining,
main = title_from_above,
xlab = expression(sigma),
ylab = expression(beta),
col = "darkblue")
}
plot_pmmh_output <- function(output_pmmh,
burnin,
true_vals = NULL,
plot_type = "ilya") {
if (!is.null(true_vals)) {
out_type_simulation = TRUE
sigma_x_true <- true_vals[1]
beta_y_true  <- true_vals[2]
} else {
out_type_simulation = FALSE
}
MM <- length(output_pmmh[[1]])
if (plot_type == "ilya") {
samples_sigma_x <- output_pmmh$samples_sigma_x
samples_beta_y  <- output_pmmh$samples_beta_y
post_mean_sig_x <- mean(samples_sigma_x[burnin:MM])
post_mean_bet_y <- mean(samples_beta_y[burnin:MM])
graphics::par(mfrow = c(2, 4), oma = c(0, 0, 2, 0))
expressions_sigma <- list(expression(Histogramm~of~sigma),
expression(sigma),
expression(sigma~trace))
samples_list <- list(samples_sigma_x, samples_beta_y)
plot_parameter_post_results(samples = samples_list,
post_mean = post_mean_sig_x,
true_vals = sigma_x_true,
expression_list = expressions_sigma,
burnin = burnin,
MM = MM,
out_type_simulation,
from_above_after_burnin = TRUE)
expressions_beta <- list(expression(Histogramm~of~beta),
expression(beta),
expression(beta~trace))
samples_list <- list(samples_beta_y, samples_sigma_x)
plot_parameter_post_results(samples = samples_list,
post_mean = post_mean_bet_y,
true_vals = beta_y_true,
expression_list = expressions_beta,
burnin = burnin,
MM = MM,
out_type_simulation,
from_above_after_burnin = FALSE)
} else {
stop("Unknown plot type.")
}
title_text <- paste0("Posterior Estimatation Results: ",
"(red: post. mean; green: true values if provided)")
graphics::title(main = title_text,
outer = TRUE)
graphics::par(mfrow = c(1, 1))
}
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelExamples)
devtools::document()
library(SVmodelRcppSMC)
source("~/Dropbox/projects/gsoc21/SVmodelRcppSMC/R/09_AL_testing.R")
library(SVmodelRcppSMC)
